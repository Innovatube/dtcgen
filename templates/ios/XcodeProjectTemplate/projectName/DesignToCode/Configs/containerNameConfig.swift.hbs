import Foundation
import UIKit

class {{container.name}}Config: ViewConfigImpl {

    override func configureViews() {
        self.views = [:]
        self.constraints = [:]
        var view: UIView? = nil
        
        {{#views}}
        {{#eq type 'View'}}
        view = Container(frame: CGRect(x: {{rect.x}}, y: {{rect.y}}, width: {{rect.width}}, height: {{rect.height}}))
        (view as! Container).name = "{{name}}"
        {{#if backgroundColor }}
        (view as! Container).containerColor = UIColor(red: {{backgroundColor.fill.red}}, green: {{backgroundColor.fill.green}}, blue: {{backgroundColor.fill.blue}}, alpha: {{backgroundColor.fill.alpha}})
        {{/if}}
        {{/eq}}
        {{#eq type 'Button'}}
        {{#if hasIcon }}
        view = IconButton(frame: CGRect(x: {{rect.x}}, y: {{rect.y}}, width: {{rect.width}}, height: {{rect.height}}))
        (view as! IconButton).iconImage = UIImage(named: "DtcGenerated/Icon")
        {{else}}
        view = ContainedButton(frame: CGRect(x: {{rect.x}}, y: {{rect.y}}, width: {{rect.width}}, height: {{rect.height}}))
        (view as! ContainedButton).setTitle("{{name}}", for: .normal)
        {{/if}}
        {{#if backgroundColor }}
        (view as! ContainedButton).containerColor = UIColor(red: {{backgroundColor.fill.red}}, green: {{backgroundColor.fill.green}}, blue: {{backgroundColor.fill.blue}}, alpha: {{backgroundColor.fill.alpha}})
        {{/if}}
        {{/eq}}
        {{#eq type 'TextView'}}
        view = TextView(frame: CGRect(x: {{rect.x}}, y: {{rect.y}}, width: {{rect.width}}, height: {{rect.height}}),
        textContainer: nil)
        view!.backgroundColor = UIColor.clear
        (view as! TextView).text = "{{text}}"
        {{!-- (view as! TextView).textAlignment = {{alignment}} --}}
        (view as! TextView).font = UIFont(name: "{{fontName}}", size: {{fontSize}})
        (view as! TextView).textColor = UIColor(red: {{fontColor.fill.red}}, green: {{fontColor.fill.green}}, blue: {{fontColor.fill.blue}}, alpha: {{fontColor.fill.alpha}})
        {{#if backgroundColor }}
        (view as! TextView).containerColor = UIColor(red: {{backgroundColor.fill.red}}, green: {{backgroundColor.fill.green}}, blue: {{backgroundColor.fill.blue}}, alpha: {{backgroundColor.fill.alpha}})
        {{/if}}
        {{/eq}}
        {{#eq type 'Image'}}
        view = UIImageView(frame: CGRect(x: {{rect.x}}, y: {{rect.y}}, width: {{rect.width}}, height: {{rect.height}}))
        (view as! UIImageView).image = UIImage(named: "DtcGenerated/images/{{stem imageName}}")
        view!.contentMode = .scaleAspectFill
        view!.backgroundColor = UIColor(red: {{backgroundColor.fill.red}}, green: {{backgroundColor.fill.green}}, blue: {{backgroundColor.fill.blue}}, alpha: {{backgroundColor.fill.alpha}})
        {{/eq}}
        {{#if parentId }}
        view!.parentId = "{{parentId}}"
        {{/if}}
        view!.clipsToBounds = true
        view!.translatesAutoresizingMaskIntoConstraints = false
        views["{{id}}"] = view
        {{#if constraints }}
        constraints["{{id}}"] = Constraint(
        top: {{#if constraints.top }}CGFloat({{constraints.top}}){{else}}nil{{/if}},
        right: {{#if constraints.right }}CGFloat({{constraints.right}}){{else}}nil{{/if}},
        bottom: {{#if constraints.bottom }}CGFloat({{constraints.bottom}}){{else}}nil{{/if}},
        left: {{#if constraints.left }}CGFloat({{constraints.left}}){{else}}nil{{/if}},
        width: {{#if constraints.width }}CGFloat({{constraints.width}}){{else}}nil{{/if}},
        height: {{#if constraints.height }}CGFloat({{constraints.height}}){{else}}nil{{/if}})
        {{/if}}
        
        {{/views}}
    }
}
