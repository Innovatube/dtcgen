import Foundation
import UIKit

class {{classPrefix}}CollectionViewCell: BindableCollectionViewCell<{{modelClassName}}> {

    var viewConfig: ViewConfig?

    // called when the view is instantiated via code, not interface builder.
    override init(frame: CGRect) {
        super.init(frame: frame)
        self.viewConfig = Dtc.config.{{container.name}}
        viewConfig!.adopt(name:"{{classPrefix}}", on: self.contentView)
    }

    // called via interface builder, but not initialize IBOutlets, IBActions
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }

    // called after all the nib objects initialized
    override func awakeFromNib() {
        super.awakeFromNib()
    }

    // called after designable object is instantiated by Interface Builder.
    override func prepareForInterfaceBuilder() {
        super.prepareForInterfaceBuilder()
    }

    override func bind(data: {{modelClassName}}) {
        {{#properties}}
        do {
            let viewId = Dtc.viewId.{{treePath}}
            let view = self.viewConfig?.getView(viewId)
            (view as? {{className}})?.{{classPropertyName}} = data.{{name}}
        }
        {{/properties}}
    }
}
