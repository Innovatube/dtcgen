import Foundation
import UIKit

class {{classPrefix}}CollectionViewCell: BindableCollectionViewCell<[TreeElement]> {

    var viewConfig: ViewConfig?
    var viewIdMap: [String: String] = [:]

    // called when the view is instantiated via code, not interface builder.
    override init(frame: CGRect) {
        super.init(frame: frame)
        self.viewConfig = Dtc.config.{{container.name}}
        self.viewIdMap = viewConfig!.adopt(name:"{{treeName}}", on: self.contentView)
    }

    // called via interface builder, but not initialize IBOutlets, IBActions
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }

    // called after all the nib objects initialized
    override func awakeFromNib() {
        super.awakeFromNib()
    }

    // called after designable object is instantiated by Interface Builder.
    override func prepareForInterfaceBuilder() {
        super.prepareForInterfaceBuilder()
    }

    override func bind(data: [TreeElement]) {
        guard let viewConfig = self.viewConfig else { return }
        for (uid, name) in self.viewIdMap {
            // you need to exclude dynamic classes itself.
            // because all `data`'s treeElements are belongings of the dynamic classes,
            // so both `name` and `name within the data` will never match on `getProperty(name)`.
            // that's why I need to exclude here.
            let targetName = viewConfig.trimClassPrefix(name, classPrefix: "{{treeName}}")
            guard
                let view = self.viewConfig?.getView(uid),
                let props = data.getProperty(targetName) else { continue }
            switch view {
            case is Container:
                guard let props = props as? ViewProps else { break }
                (view as! Container).assign(props: props)
            case is ImageView:
                guard let props = props as? ImageProps else { break }
                (view as! ImageView).assign(props: props)
            case is Label:
                guard let textViewProps = props as? TextViewProps else { break }
                (view as! Label).assign(props: textViewProps)
            case is TextView:
                guard let textViewProps = props as? TextViewProps else { break }
                (view as! TextView).assign(props: textViewProps)
            case is TextField:
                guard let textInputProps = props as? TextInputProps else { break }
                (view as! TextField).assign(props: textInputProps)
            default:
                props.assign(to: view)
                break
            }

        }
    }
}
