import Foundation
import UIKit

class {{classPrefix}}CollectionViewCell: BindableCollectionViewCell<[PropertiesWrapper]> {

    var viewConfig: ViewConfig?
    var viewIdMap: [String: String] = [:]

    // called when the view is instantiated via code, not interface builder.
    override init(frame: CGRect) {
        super.init(frame: frame)
        self.viewConfig = Dtc.config.{{container.name}}
        self.viewIdMap = viewConfig!.adopt(name:"{{treeName}}", on: self.contentView)
    }

    // called via interface builder, but not initialize IBOutlets, IBActions
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }

    // called after all the nib objects initialized
    override func awakeFromNib() {
        super.awakeFromNib()
    }

    // called after designable object is instantiated by Interface Builder.
    override func prepareForInterfaceBuilder() {
        super.prepareForInterfaceBuilder()
    }

    override func bind(data: [PropertiesWrapper]) {
        for (uid, name) in self.viewIdMap {
            let view = self.viewConfig?.getView(uid)
            let propertyMap = data.getProperty(name)
            // propertyMapは例えば { text: "hoge", backgroundColor: UIColor(xxx) } とか
            (view as UIView).assign(propertyMap)
            {{!-- // quicktypeで自動的に変換したものに、extension City { } みたいな感じで
            // 別ファイルでextensinoを作成し、getPropertyを生やす            
            // assginを extensionでUIViewにはやして、viewにpropertyMapのプロパティが存在すれば、アサインする
            // ただし、viewはNSObjectである必要がある。理由は以下参照:
            // https://stackoverflow.com/questions/35398909/how-to-check-if-an-object-has-a-stored-property
            --}}            
        }
    }
}
