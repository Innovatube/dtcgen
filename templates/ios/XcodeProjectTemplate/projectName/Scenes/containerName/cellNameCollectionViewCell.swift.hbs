import Foundation
import UIKit

class {{classPrefix}}CollectionViewCell: BindableCollectionViewCell<[TreeElement]> {

    var viewConfig: ViewConfig?
    var viewIdMap: [String: String] = [:]

    // called when the view is instantiated via code, not interface builder.
    override init(frame: CGRect) {
        super.init(frame: frame)
        self.viewConfig = Dtc.config.{{container.name}}
        self.viewIdMap = viewConfig!.adopt(name:"{{treeName}}", on: self.contentView)
    }

    // called via interface builder, but not initialize IBOutlets, IBActions
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }

    // called after all the nib objects initialized
    override func awakeFromNib() {
        super.awakeFromNib()
    }

    // called after designable object is instantiated by Interface Builder.
    override func prepareForInterfaceBuilder() {
        super.prepareForInterfaceBuilder()
    }

    override func bind(data: [TreeElement]) {
        for (uid, _) in self.viewIdMap {
            guard
                let view = self.viewConfig?.getView(uid),
                let props = data.getProperty(uid) else { continue }
            props.assign(to: view)
        }
    }
}
