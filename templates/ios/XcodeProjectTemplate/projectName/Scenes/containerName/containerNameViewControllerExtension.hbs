/*
list配下は除外するように
json作って、quicktypeに流してcodableを作成し、

{ 
  cellName: [
    {
      {{name}}: cityCell,
      subTitle: FRANCE,
      imageName: DtcGenerated/images/xxxxxxxxx
    },
    {
      {{name}}: {{}},
      subTitle: FRANCE,
      imageName: DtcGenerated/images/xxxxxxxxx
    },
  ],
  cellName2: []
}

listSections: [
    {
        className: "cellName",
        section: 0,
        dataVariableName: "listRows"
        insets: {top: 0, left: 0, bottom: 0, right: 0},
        itemCount: 3,
    }
]

listRows: 
[
    {
        section: 0,
        row: 1,
        size: {x: 100, y: 100},
        class: "cellName",
    }
]
*/

import Foundation
import UIKit

extension {{container.name}}ViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        var itemCount: Int = 0
        switch section {
        {{#listSections}}
        case {{section}}:
            itemCount = {{itemCount}}
        {{/listSections}}
        default:
            break
        }
        return itemCount
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        var cell: UICollectionViewCell = UICollectionViewCell()
        switch indexPath.section {
        {{#listSections}}
        case {{section}}:
            cell = collectionView.dequeueReusableCell(withReuseIdentifier: "{{class}}CollectionViewCell", for: indexPath)
            cell.bind(data: {{dataVariableName}}[indexPath.row])
        {{/listSections}}
        default:
            break
        }
        return cell
    }
}

extension {{container.name}}Config: UICollectionViewDelegateFlowLayout {
    // Set size for each cell
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        var size: CGSize = CGSize.zero
        switch indexPath.row {
        {{#listRows}}
        case {{row}}:
            size = CGSize(width: {{size.x}}, height: {{size.y}})
        {{/listRows}}
        default:
            break
        }
        return size
    }
    
    // セクションごとのインセット
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        var insets: UIEdgeInsets = UIEdgeInsets.zero
        switch section {
        {{#listSections}}
        case {{section}}:
            insets = UIEdgeInsets(top: {{insets.top}}, left: {{insets.left}}, bottom: {{insets.bottom}}, right: {{insets.right}})
        {{/listSections}}
        default:
            break
        }
        return insets
    }

    /*
    // セクションごとの行間(縦)のマージン
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }

    // セクションごとのアイテム間(横)のマージン
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
    */
}