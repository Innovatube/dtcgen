import UIKit

class {{container.name}}ViewController: UIViewController {

    // each element should be UIView or subclasses
    var views: [UIView] = []
    var constraints: [Constraint?] = []

    override func viewDidLoad() {
        super.viewDidLoad()

        self.view.backgroundColor = UIColor.white

        // TODO: within `configureViews()`, we should use safeAreaInsets, not hard coding (34).
        configureViews()
        for view in views {
            self.addView(view)
        }
        self.layoutViews()
    }

    private func layoutViews() {
        guard views.count == constraints.count else { return }
        var anchors: [NSLayoutConstraint] = []

        for idx in 0..<views.count {
            guard let constraint = constraints[idx] else { continue }
            let view = views[idx]
            let superview = view.superview ?? self.view!

            if let top = constraint.top {
                anchors.append(view.topAnchor.constraint(equalTo: superview.safeAreaLayoutGuide.topAnchor, constant: top))
            }
            if let right = constraint.right {
                anchors.append(view.rightAnchor.constraint(equalTo: superview.safeAreaLayoutGuide.rightAnchor, constant: right))
            }
            if let bottom = constraint.bottom {
                anchors.append(view.bottomAnchor.constraint(equalTo: superview.safeAreaLayoutGuide.bottomAnchor, constant: bottom))
            }
            if let left = constraint.left {
                anchors.append(view.leftAnchor.constraint(equalTo: superview.safeAreaLayoutGuide.leftAnchor, constant: left))
            }
            if let width = constraint.width {
                anchors.append(view.widthAnchor.constraint(equalToConstant: width))
            }
            if let height = constraint.height {
                anchors.append(view.heightAnchor.constraint(equalToConstant: height))
            }
        }
        NSLayoutConstraint.activate(anchors)
    }

    private func configureViews() {
        // viewsに値を入れていく
        self.views = []
        self.constraints = []
        var view: UIView? = nil
        {{#views}}
        {{#eq type 'View'}}
        view = Container(frame: CGRect(x: {{rect.x}}, y: {{rect.y}}, width: {{rect.width}}, height: {{rect.height}}))
        (view as! Container).name = "{{name}}"
        {{#if backgroundColor }}
        (view as! Container).containerColor = UIColor(red: {{backgroundColor.fill.red}}, green: {{backgroundColor.fill.green}}, blue: {{backgroundColor.fill.blue}}, alpha: {{backgroundColor.fill.alpha}})
        {{/if}} 
        {{/eq}}
        {{#eq type 'Button'}}
        {{#if hasIcon }}
        view = IconButton(frame: CGRect(x: {{rect.x}}, y: {{rect.y}}, width: {{rect.width}}, height: {{rect.height}}))
        (view as! IconButton).iconImage = UIImage(named: "Icon")
        {{else}}
        view = ContainedButton(frame: CGRect(x: {{rect.x}}, y: {{rect.y}}, width: {{rect.width}}, height: {{rect.height}}))
        (view as! ContainedButton).setTitle("{{name}}", for: .normal)
        {{/if}}
        {{#if backgroundColor }}
        (view as! ContainedButton).containerColor = UIColor(red: {{backgroundColor.fill.red}}, green: {{backgroundColor.fill.green}}, blue: {{backgroundColor.fill.blue}}, alpha: {{backgroundColor.fill.alpha}})
        {{/if}} 
        {{/eq}}
        {{#eq type 'TextView'}}
        view = TextView(frame: CGRect(x: {{rect.x}}, y: {{rect.y}}, width: {{rect.width}}, height: {{rect.height}}),
                        textContainer: nil)
        view!.backgroundColor = UIColor.clear
        (view as! TextView).text = "{{text}}"
        {{!-- (view as! TextView).textAlignment = {{alignment}} --}}
        (view as! TextView).font = UIFont(name: "{{fontName}}", size: {{fontSize}})
        (view as! TextView).textColor = UIColor(red: {{fontColor.fill.red}}, green: {{fontColor.fill.green}}, blue: {{fontColor.fill.blue}}, alpha: {{fontColor.fill.alpha}})
        {{#if backgroundColor }}
        (view as! TextView).containerColor = UIColor(red: {{backgroundColor.fill.red}}, green: {{backgroundColor.fill.green}}, blue: {{backgroundColor.fill.blue}}, alpha: {{backgroundColor.fill.alpha}})
        {{/if}}
        {{/eq}}
        {{#if parentId }}
        view!.parentId = "{{parentId}}"
        {{/if}}
        view!.translatesAutoresizingMaskIntoConstraints = false
        view!.restorationIdentifier = "{{id}}"
        views.append(view!)
        {{#if constraints }}
        constraints.append(Constraint(
            top: {{#if constraints.top }}CGFloat({{constraints.top}}){{else}}nil{{/if}},
            right: {{#if constraints.right }}CGFloat(-{{constraints.right}}){{else}}nil{{/if}},
            bottom: {{#if constraints.bottom }}CGFloat(-{{constraints.bottom}} + 34){{else}}nil{{/if}},
            left: {{#if constraints.left }}CGFloat({{constraints.left}}){{else}}nil{{/if}}, 
            width: {{#if constraints.width }}CGFloat({{constraints.width}}){{else}}nil{{/if}}, 
            height: {{#if constraints.height }}CGFloat({{constraints.height}}){{else}}nil{{/if}}))
        {{else}}
        constraints.append(nil)
        {{/if}}

        {{!-- リバイズ案 --}}
        {{!-- 1. result.jsonにあったcodableを生成 --}}
        {{!-- 2. とりまviewController内で当該codableの配列を作成 --}}
        {{!-- view.snp.makeConstraints { (make) -> Void in
            make.width.height.equalTo(50)
            make.center.equalTo(self.view)
        } --}}
        {{/views}}
    }

    private func addView(_ targetView:UIView) {
        var hasParentView = false
        for view in views {
            guard let viewId = view.restorationIdentifier else { continue }
            if targetView.parentId == viewId {
                view.addSubview(targetView)
                hasParentView = true
                break
            }
        }
        if !hasParentView {
            self.view.addSubview(targetView)
        }
    }
}
